# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

"""Auth model"""
type AuthModel {
  """The access token of the authenticated user"""
  access_token: String!

  """The refresh token of the authenticated user"""
  refresh_token: String!
}

"""Account model"""
type AccountModel {
  """The id of the account"""
  id: String!

  """The first name of the account"""
  first_name: String!

  """The last name of the account"""
  last_name: String!

  """The name of the account"""
  name: String!

  """The email of the account"""
  email: String!

  """The phone of the account"""
  phone: String

  """The birthday of the account"""
  birthday: DateTime!

  """The status of the account"""
  status: AdminStatus!

  """The deleted status of the account"""
  deleted: Boolean!

  """The created date of the account"""
  created_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""The status of an admin user"""
enum AdminStatus {
  active
  deactivated
}

type TeamModel {
  """The id of the account"""
  id: String!

  """The first name of the account"""
  first_name: String!

  """The last name of the account"""
  last_name: String!

  """The name of the account"""
  name: String!

  """The email of the account"""
  email: String!

  """The phone of the account"""
  phone: String

  """The birthday of the account"""
  birthday: DateTime!

  """The status of the account"""
  status: AdminStatus!

  """The deleted status of the account"""
  deleted: Boolean!

  """The created date of the account"""
  created_at: DateTime!
}

type TeamListModel {
  edges: [TeamModelRelayEdge!]!
  pageInfo: RelayPageInfo!
  search: String
}

type TeamModelRelayEdge {
  cursor: String!
  node: TeamModel!
}

type RelayPageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

"""Property Model"""
type PropertyModel {
  id: ID!
  short_id: Int!
  title: String!
  description: String!
  category: PropertyCategory!
  state: String!
  city: String!
  address: String!
  surface: Float
  floor: Int
  numberOfFloors: Int
  buildingYear: Int
  numberOfRooms: Int
  numberOfBathRooms: Int
  numberOfBedRooms: Int
  numberOfBalconies: Int
  sellPrice: Float
  rentPrice: Float
  forSale: Boolean!
  forRent: Boolean!
  agent: TeamModel!
  deleted: Boolean!
  created_at: DateTime!
}

"""Property Category"""
enum PropertyCategory {
  home
  apartment
  office
  object
}

type PropertyListModel {
  edges: [PropertyModelRelayEdge!]!
  pageInfo: RelayPageInfo!
  search: String
}

type PropertyModelRelayEdge {
  cursor: String!
  node: PropertyModel!
}

type Query {
  account: AccountModel!
  getTeamById(input: GetTeamByIDInput!): TeamModel!
  getTeams(input: GetAllTeamsInput!): TeamListModel!
  properties(input: GetAllPropertiesInput!): PropertyListModel!
  getProperty(input: GetPropertyInput!): PropertyModel!
}

input GetTeamByIDInput {
  id: ID!
}

"""Get All Teams Input"""
input GetAllTeamsInput {
  """Cursor"""
  cursor: String

  """Limit of data to return max 50"""
  limit: Int = 20
  sort: [SortType!]
  filters: [FiltersInput!]
  search: String
}

"""Sort Input Type"""
input SortType {
  id: String!
  value: String!
}

input FiltersInput {
  id: String!
  search: String
  multiselect: [String!]
  users: [String!]
  time_tracking_projects: [String!]
  jobs: [String!]
  switch: Boolean
  date_range: [String!]
  number_range: [String!]
  type: String!
}

"""Get All Properties Input"""
input GetAllPropertiesInput {
  """Cursor"""
  cursor: String

  """Limit of data to return max 50"""
  limit: Int = 20
  sort: [SortType!]
  filters: [FiltersInput!]
  search: String
}

"""Get Property Input"""
input GetPropertyInput {
  id: String!
}

type Mutation {
  register(input: RegisterInput!): AuthModel!
  login(input: LoginInput!): String!
  verifyLogin(input: VerifyLoginInput!): AuthModel!
  logout: Boolean!
  createTeam(input: CreateTeamInput!): TeamModel!
  updateTeam(input: UpdateTeamInput!): TeamModel!
  changeTeamStatus(input: ChangeTeamStatusInput!): Boolean!
  updateName(input: UpdateNameInput!): AccountModel!
  changeEmail(input: ChangeEmailInput!): AccountModel!
  changePhone(input: ChangePhoneInput!): AccountModel!
  createProperty(input: CreatePropertyInput!): PropertyModel!
  updateProperty(input: UpdatePropertyInput!): PropertyModel!
  removeProperty(input: RemoveRestorePropertyInput!): Boolean!
  restoreProperty(input: RemoveRestorePropertyInput!): Boolean!
}

input RegisterInput {
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  phone: String
  birthday: DateTime
}

"""Verify login input"""
input LoginInput {
  email: String!
  password: String!
}

"""Verify login input"""
input VerifyLoginInput {
  """Verify Token"""
  token: String!
}

input CreateTeamInput {
  first_name: String!
  last_name: String!
  email: String!
  password: String!
  phone: String
  birthday: DateTime
}

input UpdateTeamInput {
  id: ID!
  first_name: String
  last_name: String
  birthday: DateTime
}

input ChangeTeamStatusInput {
  id: ID!
  status: AdminStatus!
  deleted: Boolean!
}

"""Update Name Input"""
input UpdateNameInput {
  first_name: String
  last_name: String
}

"""Change Email Input"""
input ChangeEmailInput {
  email: String!
}

"""Change Phone Input"""
input ChangePhoneInput {
  phone: String!
}

"""Create Property Input"""
input CreatePropertyInput {
  title: String!
  description: String!
  category: PropertyCategory!
  state: String!
  city: String!
  address: String!
  surface: Float
  numberOfFloors: Int
  buildingYear: Int
  numberOfRooms: Int
  numberOfBathRooms: Int
  numberOfBedRooms: Int
  numberOfBalconies: Int
  sellPrice: Float
  rentPrice: Float
  forSale: Boolean!
  forRent: Boolean!
  published: Boolean!
  agent_id: String!
}

"""Update Property Input"""
input UpdatePropertyInput {
  title: String
  description: String
  category: PropertyCategory
  state: String
  city: String
  address: String
  surface: Float
  numberOfFloors: Int
  buildingYear: Int
  numberOfRooms: Int
  numberOfBathRooms: Int
  numberOfBedRooms: Int
  numberOfBalconies: Int
  sellPrice: Float
  rentPrice: Float
  forSale: Boolean
  forRent: Boolean
  published: Boolean
  agent_id: String
  id: String!
}

"""Remove & Restore Property Input"""
input RemoveRestorePropertyInput {
  id: String!
}