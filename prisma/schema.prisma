generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                    String         @id @default(uuid())
  first_name            String
  last_name             String
  name                  String
  email                 String         @unique
  password              String
  phone                 String?        @unique
  birthday              DateTime?
  status                AdminStatus    @default(active)
  deleted               Boolean        @default(false)
  sessions              AdminSession[]
  properties            Property[]
  agentRequests         Request[]      @relation("requestOfAgent")
  assistant_on_requests Request[]      @relation("request_assistant")
  agent_on_requests     Request[]      @relation("request_agents")
  requestAssignee       Request[]      @relation("requestAssignee")
  requests_author       Request[]      @relation("requestsAuthor")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AdminSession {
  id            String   @id @default(uuid())
  admin_id      String
  admin         Admin    @relation(fields: [admin_id], references: [id])
  refresh_token String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Client {
  id         String          @id @default(uuid())
  first_name String
  last_name  String
  name       String
  email      String          @unique
  password   String
  phone      String?         @unique
  birthday   DateTime?
  status     ClientStatus    @default(active)
  state      String?
  city       String?
  address    String?
  sessions   ClientSession[]
  properties Property[]
  requests   Request[]
  deleted    Boolean         @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ClientSession {
  id            String   @id @default(uuid())
  client_id     String
  client        Client   @relation(fields: [client_id], references: [id])
  refresh_token String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Property {
  id                String           @id @default(uuid())
  short_id          Int              @default(autoincrement())
  title             String
  description       String
  category          PropertyCategory
  state             String
  city              String
  address           String
  surface           Float?
  floor             Int?
  numberOfFloors    Int?
  buildingYear      Int?
  numberOfRooms     Int?
  numberOfBathRooms Int?
  numberOfBedRooms  Int?
  numberOfBalconies Int?
  sellPrice         Float?
  rentPrice         Float?
  status            PropertyStatus   @default(active)
  forSale           Boolean
  forRent           Boolean
  published         Boolean          @default(false)
  published_at      DateTime?
  agent_id          String
  agent             Admin            @relation(fields: [agent_id], references: [id])
  client_id         String?
  client            Client?          @relation(fields: [client_id], references: [id])
  request           Request?         @relation(fields: [request_id], references: [id])
  request_id        String?
  builder           Builder?         @relation(fields: [builder_id], references: [id])
  builder_id        String?
  complex           Complex?         @relation(fields: [complex_id], references: [id])
  complex_id        String?
  propertyRequests  Request[]        @relation("requestForProperties")
  deleted           Boolean          @default(false)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
}

model Request {
  id                   String             @id @default(uuid())
  short_id             Int                @default(autoincrement())
  fullName             String?
  author_id            String?
  author               Admin?             @relation("requestsAuthor", fields: [author_id], references: [id])
  client_id            String?
  client               Client?            @relation(fields: [client_id], references: [id])
  assistant            Admin?             @relation("request_assistant", fields: [assistant_id], references: [id])
  assistant_id         String?
  clientType           String?
  agents               Admin[]            @relation("request_agents")
  type                 RequestBuyType     @default(toBuy)
  category             String[]           @default([]) // home apartment office unit land object warehouse
  state_id             String?
  source               String?
  paymentMethod        String?
  state                String?
  city                 String?
  assignee_id          String?
  assignee             Admin?             @relation("requestAssignee", fields: [assignee_id], references: [id])
  street               String?
  builder              Builder[]          @relation("builderRequests")
  buildingConstructor  Complex[]          @relation("complexRequests")
  requestOfAgent       Admin[]            @relation("requestOfAgent")
  requestOf            String?            @default("real-estate")
  surfaceMin           Int?               @default(0)
  surfaceMax           Int?
  surfaceM2            Float?
  surfaceM2Min         Int?
  surfaceM2Max         Int?
  status               Int                @default(1) // status: 1processing,  2 todo,  3 done
  buildingStatus       String             @default("")
  floorMin             Int?
  floorMax             Int?
  roomsMin             Int?
  roomsMax             Int?
  orientation          String[]           @default([])
  furnishing           String[]           @default([])
  heatingSystem        String[]           @default([])
  others               String[]           @default([])
  otherDetails         String?
  destination          String?
  possessionSheet      Boolean?
  phone                String?
  message              String?
  createdFrom          RequestCreatedFrom @default(form)
  deleted              Boolean            @default(false)
  buildingPermits      Boolean?
  documents            String?
  infrastructure       String[]           @default([])
  budget               Int                @default(0)
  budgetFull           Float              @default(0)
  budgetType           BudgetType         @default(full)
  matchingProperties   Int?               @default(0)
  sortNumber           Int?               @default(0)
  requestForProperties Property[]         @relation("requestForProperties")
  lastMatchCreated     DateTime?
  paid                 Boolean?           @default(false)
  isPaid               Boolean?           @default(false)
  properties           Property[]
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt

  @@index([state_id])
  @@index([client_id])
  @@index([author_id])
  @@index([assignee_id])
  @@index([assistant_id])
}

model Builder {
  id         String     @id @default(uuid())
  name       String
  deleted    Boolean    @default(false)
  city       String?
  state      String?
  complexes  Complex[]
  properties Property[]
  requests   Request[]  @relation("builderRequests")
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model Complex {
  id         String     @id @default(uuid())
  name       String
  deleted    Boolean    @default(false)
  builder_id String?
  builder    Builder?   @relation(fields: [builder_id], references: [id])
  city       String?
  street     String?
  state      String?
  properties Property[]
  requests   Request[]  @relation("complexRequests")
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  @@index([builder_id])
}

enum AdminStatus {
  active
  deactivated
}

enum ClientStatus {
  active
  invited
  deactivated
}

enum PropertyStatus {
  active
  deactivated
}

enum PropertyCategory {
  home
  apartment
  office
  object
}

enum BudgetType {
  m2
  acre
  area
  full
}

enum RequestBuyType {
  toBuy
  toRent
}

enum RequestCreatedFrom {
  favorites
  contact
  form
  forProperties
}
