generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         String         @id @default(uuid())
  first_name String
  last_name  String
  name       String
  email      String         @unique
  password   String
  phone      String?        @unique
  birthday   DateTime?
  status     AdminStatus    @default(active)
  deleted    Boolean        @default(false)
  sessions   AdminSession[]
  properties Property[]

  created_at DateTime  @default(now())
  updated_at DateTime @updatedAt
}

model AdminSession {
  id            String   @id @default(uuid())
  admin_id      String
  admin         Admin    @relation(fields: [admin_id], references: [id])
  refresh_token String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Client {
  id         String         @id @default(uuid())
  first_name String
  last_name  String
  name       String
  email      String         @unique
  password   String
  phone      String?        @unique
  birthday   DateTime?
  status     ClientStatus   @default(active)
  state      String?
  city       String?
  address    String?
  deleted    Boolean        @default(false)
  sessions   ClientSession[]
  properties Property[]

  created_at DateTime  @default(now())
  updated_at DateTime @updatedAt
}


model ClientSession {
  id            String   @id @default(uuid())
  client_id      String
  client         Client    @relation(fields: [client_id], references: [id])
  refresh_token String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Property {
  id                String           @id @default(uuid())
  short_id          Int              @default(autoincrement())
  title             String
  description       String
  category          PropertyCategory
  state             String
  city              String
  address           String
  surface           Float?
  floor             Int?
  numberOfFloors    Int?
  buildingYear      Int?
  numberOfRooms     Int?
  numberOfBathRooms Int?
  numberOfBedRooms  Int?
  numberOfBalconies Int?
  sellPrice         Float?
  rentPrice         Float?
  status            PropertyStatus   @default(active)
  forSale           Boolean
  forRent           Boolean
  published         Boolean          @default(false)
  published_at      DateTime?
  agent_id          String
  agent             Admin            @relation(fields: [agent_id], references: [id])
  client_id         String?
  client            Client?          @relation(fields: [client_id], references: [id])
  deleted           Boolean          @default(false)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
}

enum AdminStatus {
  active
  deactivated
}

enum ClientStatus {
  active
  invited
  deactivated
}

enum PropertyStatus {
  active
  deactivated
}

enum PropertyCategory {
  home
  apartment
  office
  object
}
